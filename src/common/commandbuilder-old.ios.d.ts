import { ImageSource } from 'tns-core-modules/image-source';
import * as Common from './common';
export declare class CommandBuilder {
    private builder;
    constructor(emulation: Common.Emulation);
    appendAbsolutePosition(position: number): CommandBuilder;
    appendAlignment(position: Common.AlignmentPosition): CommandBuilder;
    appendBarcodeBytes(bytes: ArrayBuffer, length: number, symbology?: Common.BarcodeSymbology, width?: Common.BarcodeWidth, height?: number, hri?: boolean): CommandBuilder;
    appendBarcodeBytesWithAbsolutePosition(bytes: ArrayBuffer, length: number, symbology: Common.BarcodeSymbology, width: Common.BarcodeWidth, height: number, hri: boolean, position: number): CommandBuilder;
    appendBarcodeBytesWithAlignment(bytes: ArrayBuffer, length: number, symbology: Common.BarcodeSymbology, width: Common.BarcodeWidth, height: number, hri: boolean, position: Common.AlignmentPosition): CommandBuilder;
    appendBarcodeData(otherData: string, symbology: Common.BarcodeSymbology, width: Common.BarcodeWidth, height: number, hri: boolean): CommandBuilder;
    appendBarcodeDataWithAbsolutePosition(otherData: string, symbology: Common.BarcodeSymbology, width: Common.BarcodeWidth, height: number, hri: boolean, position: number): CommandBuilder;
    appendBarcodeDataWithAlignment(otherData: string, symbology: Common.BarcodeSymbology, width: Common.BarcodeWidth, height: number, hri: boolean, position: Common.AlignmentPosition): CommandBuilder;
    appendBitmap(image: ImageSource, diffusion: boolean, width: number, bothScale: boolean, rotation: Common.BitmapConverterRotation): CommandBuilder;
    appendBitmapWithAbsolutePosition(image: ImageSource, diffusion: boolean, width: number, bothScale: boolean, rotation: Common.BitmapConverterRotation, position: number): CommandBuilder;
    appendBitmapWithAlignment(image: ImageSource, diffusion: boolean, width: number, bothScale: boolean, rotation: Common.BitmapConverterRotation, position: Common.AlignmentPosition): CommandBuilder;
    appendBlackMark(type: Common.BlackMarkType): CommandBuilder;
    appendByte(data: number): CommandBuilder;
    appendBytes(bytes: ArrayBuffer, length: number): CommandBuilder;
    appendBytesWithAbsolutePosition(bytes: ArrayBuffer, length: number, position: number): CommandBuilder;
    appendBytesWithAlignment(bytes: ArrayBuffer, length: number, position: Common.AlignmentPosition): CommandBuilder;
    appendBytesWithEmphasis(bytes: ArrayBuffer, length: number): CommandBuilder;
    appendBytesWithInvert(bytes: ArrayBuffer, length: number): CommandBuilder;
    appendBytesWithLineFeed(bytes: ArrayBuffer, length: number, line?: number): CommandBuilder;
    appendBytesWithMultiple(bytes: ArrayBuffer, length: number, width: number, height: number): CommandBuilder;
    appendBytesWithMultipleHeight(bytes: ArrayBuffer, length: number, height: number): CommandBuilder;
    appendBytesWithMultipleWidth(bytes: ArrayBuffer, length: number, width: number): CommandBuilder;
    appendBytesWithUnderLine(bytes: ArrayBuffer, length: number): CommandBuilder;
    appendBytesWithUnitFeed(bytes: ArrayBuffer, length: number, unit: number): CommandBuilder;
    appendCharacterSpace(space: number): CommandBuilder;
    appendCodePage(type: Common.SCBCodePageType): CommandBuilder;
    appendCutPaper(action: Common.CutPaperAction): CommandBuilder;
    appendData(otherData: string): CommandBuilder;
    appendDataWithAbsolutePosition(otherData: string, position: number): CommandBuilder;
    appendDataWithAlignment(otherData: string, position: Common.AlignmentPosition): CommandBuilder;
    appendDataWithEmphasis(otherData: string): CommandBuilder;
    appendDataWithInvert(otherData: string): CommandBuilder;
    appendDataWithLineFeed(otherData: string, line?: number): CommandBuilder;
    appendDataWithMultiple(otherData: string, width: number, height: number): CommandBuilder;
    appendDataWithMultipleHeight(otherData: string, height: number): CommandBuilder;
    appendDataWithMultipleWidth(otherData: string, width: number): CommandBuilder;
    appendDataWithUnderLine(otherData: string): CommandBuilder;
    appendDataWithUnitFeed(otherData: string, unit: number): CommandBuilder;
    appendEmphasis(emphasis: boolean): CommandBuilder;
    appendFontStyle(type: Common.FontStyleType): CommandBuilder;
    appendHorizontalTabPosition(positions: number[]): CommandBuilder;
    appendInitialization(type: Common.InitializationType): CommandBuilder;
    appendInternational(type: Common.InternationalType): CommandBuilder;
    appendInvert(invert: boolean): CommandBuilder;
    appendLineFeed(): CommandBuilder;
    appendLineSpace(lineSpace: number): CommandBuilder;
    appendLogo(size: Common.LogoSize, number: number): CommandBuilder;
    appendMultiple(width: number, height: number): CommandBuilder;
    appendPageModeRotation(rotation: Common.BitmapConverterRotation): CommandBuilder;
    appendPageModeVerticalAbsolutePosition(position: number): CommandBuilder;
    appendPdf417Bytes(bytes: ArrayBuffer, length: number, line: number, column: number, level: Common.Pdf417Level, module: number, aspect: number): CommandBuilder;
    appendPdf417BytesWithAbsolutePosition(bytes: ArrayBuffer, length: number, line: number, column: number, level: Common.Pdf417Level, module: number, aspect: number, position: number): CommandBuilder;
    appendPdf417BytesWithAlignment(bytes: ArrayBuffer, length: number, line: number, column: number, level: Common.Pdf417Level, module: number, aspect: number, position: Common.AlignmentPosition): CommandBuilder;
    appendPdf417Data(otherData: string, line: number, column: number, level: Common.Pdf417Level, module: number, aspect: number): CommandBuilder;
    appendPdf417DataWithAbsolutePosition(otherData: string, line: number, column: number, level: Common.Pdf417Level, module: number, aspect: number, position: number): CommandBuilder;
    appendPdf417DataWithAlignment(otherData: string, line: number, column: number, level: Common.Pdf417Level, module: number, aspect: number, position: Common.AlignmentPosition): CommandBuilder;
    appendPeripheral(channel: Common.PeripheralChannel, time?: number): CommandBuilder;
    appendPrintableArea(type: Common.PrintableAreaType): CommandBuilder;
    appendQrCodeBytes(bytes: ArrayBuffer, length: number, model: Common.QrCodeModel, level: Common.QrCodeLevel, cell: number): CommandBuilder;
    appendQrCodeBytesWithAbsolutePosition(bytes: ArrayBuffer, length: number, model: Common.QrCodeModel, level: Common.QrCodeLevel, cell: number, position: number): CommandBuilder;
    appendQrCodeBytesWithAlignment(bytes: ArrayBuffer, length: number, model: Common.QrCodeModel, level: Common.QrCodeLevel, cell: number, position: Common.AlignmentPosition): CommandBuilder;
    appendQrCodeData(otherData: string, model: Common.QrCodeModel, level: Common.QrCodeLevel, cell: number): CommandBuilder;
    appendQrCodeDataWithAbsolutePosition(otherData: string, model: Common.QrCodeModel, level: Common.QrCodeLevel, cell: number, position: number): CommandBuilder;
    appendQrCodeDataWithAlignment(otherData: string, model: Common.QrCodeModel, level: Common.QrCodeLevel, cell: number, position: Common.AlignmentPosition): CommandBuilder;
    appendRawByte(data: number): CommandBuilder;
    appendRawBytes(bytes: ArrayBuffer, length: number): CommandBuilder;
    appendRawData(otherData: string): CommandBuilder;
    appendSound(channel: Common.SoundChannel): CommandBuilder;
    appendSoundRepeat(channel: Common.SoundChannel, repeat?: number, driveTime?: number, delayTime?: number): CommandBuilder;
    appendTopMargin(topMargin: number): CommandBuilder;
    appendUnderLine(underLine: boolean): CommandBuilder;
    appendUnitFeed(unit: number): CommandBuilder;
    beginDocument(): CommandBuilder;
    beginPageMode(rect: CGRect, rotation: Common.BitmapConverterRotation): CommandBuilder;
    endDocument(): CommandBuilder;
    endPageMode(): CommandBuilder;
    getCommands(): any;
}
